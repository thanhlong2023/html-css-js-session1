let menuCategories = {};

function addDish() {
    let category = prompt("Nh·∫≠p danh m·ª•c m√≥n ƒÉn (VD: M√≥n ch√≠nh, ƒê·ªì u·ªëng, Tr√°ng mi·ªáng):").trim();
    let name = prompt("Nh·∫≠p t√™n m√≥n ƒÉn:").trim();
    let price = Number(prompt("Nh·∫≠p gi√° m√≥n ƒÉn:").trim());
    let description = prompt("Nh·∫≠p m√¥ t·∫£ m√≥n ƒÉn:").trim();

    if (!menuCategories[category]) {
        menuCategories[category] = [];
    }

    menuCategories[category].push({ name, price, description });
    alert("M√≥n ƒÉn ƒë√£ ƒë∆∞·ª£c th√™m v√†o danh m·ª•c " + category);
}

function removeDish() {
    let name = prompt("Nh·∫≠p t√™n m√≥n ƒÉn c·∫ßn x√≥a:").trim();
    let found = false;
    for (let category in menuCategories) {
        menuCategories[category] = menuCategories[category].filter(dish => {
            if (dish.name.toLowerCase() === name.toLowerCase()) {
                found = true;
                return false;
            }
            return true;
        });
    }
    alert(found ? "ƒê√£ x√≥a m√≥n ƒÉn." : "Kh√¥ng t√¨m th·∫•y m√≥n ƒÉn.");
}

function updateDish() {
    let name = prompt("Nh·∫≠p t√™n m√≥n ƒÉn c·∫ßn c·∫≠p nh·∫≠t:").trim();
    for (let category in menuCategories) {
        let dish = menuCategories[category].find(d => d.name.toLowerCase() === name.toLowerCase());
        if (dish) {
            dish.name = prompt("Nh·∫≠p t√™n m·ªõi:", dish.name).trim();
            dish.price = Number(prompt("Nh·∫≠p gi√° m·ªõi:", dish.price).trim());
            dish.description = prompt("Nh·∫≠p m√¥ t·∫£ m·ªõi:", dish.description).trim();
            alert("C·∫≠p nh·∫≠t m√≥n ƒÉn th√†nh c√¥ng.");
            return;
        }
    }
    alert("Kh√¥ng t√¨m th·∫•y m√≥n ƒÉn.");
}

function showMenu() {
    if (Object.keys(menuCategories).length === 0) {
        alert("Menu hi·ªán ƒëang tr·ªëng!");
        return;
    }
    let menuText = "=== MENU NH√Ä H√ÄNG ===\n";
    for (let category in menuCategories) {
        menuText += `\nüìå ${category}\n`;
        menuCategories[category].forEach(dish => {
            menuText += `üçΩÔ∏è ${dish.name} - ${dish.price} VND\n   üìú ${dish.description}\n`;
        });
    }
    alert(menuText);
}

function searchDish() {
    let name = prompt("Nh·∫≠p t√™n m√≥n ƒÉn c·∫ßn t√¨m:").trim();
    let results = [];
    for (let category in menuCategories) {
        menuCategories[category].forEach(dish => {
            if (dish.name.toLowerCase().includes(name.toLowerCase())) {
                results.push(`üìå ${category} - üçΩÔ∏è ${dish.name} - ${dish.price} VND\n   üìú ${dish.description}`);
            }
        });
    }
    alert(results.length > 0 ? results.join('\n\n') : "Kh√¥ng t√¨m th·∫•y m√≥n ƒÉn.");
}

while (true) {
    let choice = Number(prompt("=== QU·∫¢N L√ù MENU NH√Ä H√ÄNG ===\n1. Th√™m m√≥n ƒÉn\n2. X√≥a m√≥n ƒÉn\n3. C·∫≠p nh·∫≠t m√≥n ƒÉn\n4. Hi·ªÉn th·ªã to√†n b·ªô menu\n5. T√¨m ki·∫øm m√≥n ƒÉn\n6. Tho√°t\n\nL·ª±a ch·ªçn c·ªßa b·∫°n:"));
    switch (choice) {
        case 1: addDish(); break;
        case 2: removeDish(); break;
        case 3: updateDish(); break;
        case 4: showMenu(); break;
        case 5: searchDish(); break;
        case 6: alert("H·∫πn g·∫∑p l·∫°i!"); break;
        default: alert("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá, vui l√≤ng nh·∫≠p l·∫°i!");
    }
    if (choice === 6) break;
}
