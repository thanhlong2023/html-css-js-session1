let library = {};
let cart = [];
let menu = `================== MENU ===================\n`
    + `1. Hi·ªÉn th·ªã danh s√°ch s√°ch theo th·ªÉ lo·∫°i.\n`
    + `2. Th√™m s√°ch m·ªõi v√†o kho.\n`
    + `3. T√¨m ki·∫øm s√°ch theo t√™n ho·∫∑c id.\n`
    + `4. Mua s√°ch.\n`
    + `5. S·∫Øp x·∫øp s√°ch theo gi√°.\n`
    + `6. T√≠nh t·ªïng s·ªë l∆∞·ª£ng s√°ch ƒë√£ mua v√† in ra t·ªïng ti·ªÅn trong gi·ªè h√†ng.\n`
    + `7. Hi·ªÉn th·ªã t·ªïng s·ªë l∆∞·ª£ng s√°ch trong kho.\n`
    + `8. Tho√°t ch∆∞∆°ng tr√¨nh.\n`
    + `\n============================================\n`
    + `\nL·ª±a ch·ªçn c·ªßa b·∫°n:   `;

let menu2 = `===========T√åM KI·∫æM S√ÅCH===========\n`
    + `1. T√¨m ki·∫øm s√°ch theo t√™n.\n`
    + `2. T√¨m ki·∫øm s√°ch theo m√£ s√°ch (ID).\n`
    + `3. Tho√°t\n`
    + `\n============================================\n`
    + `\nL·ª±a ch·ªçn c·ªßa b·∫°n:   `;

let menu3 = `===========T√åM KI·∫æM S√ÅCH===========\n`
    + `1. S·∫Øp x·∫øp tƒÉng d·∫ßn.\n`
    + `2. S·∫Øp x·∫øp gi·∫£m d·∫ßn.\n`
    + `3. Tho√°t\n`
    + `\n============================================\n`
    + `\nL·ª±a ch·ªçn c·ªßa b·∫°n:   `;

while (true) {
    let choice = Number(prompt(menu));
    switch (choice) {
        case 1:
            show_all_books();
            break;
        case 2:
            add_new_book();
            break;
        case 3:
            book_search();
            break;
        case 4:
            buy_book();
            break;
        case 5:
            sort_by_price();
            break;
        case 6:
            calculate_cart_total();
            break;
        case 7:
            show_total_books();
            break;
        case 8:
            alert("H·∫πn g·∫∑p l·∫°i b·∫°n!");
            break;
        default:
            alert("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá    , vui l√≤ng nh·∫≠p l·∫°i!");
    }
    if (choice === 8) break;
}

function add_new_book() {
    let category = prompt("Nh·∫≠p v√†o th·ªÉ lo·∫°i c·ªßa s√°ch (S√°ch B√≠ ·∫©n, S√°ch trinh th√°m,...)").trim();
    let id = Number(prompt("Nh·∫≠p v√†o m√£ s√°ch (001,...)"));
    let name = prompt("Nh·∫≠p v√†o t√™n s√°ch").trim();
    let price = Number(prompt("Nh·∫≠p v√†o gi√° s√°ch"));
    if (isNaN(price) || price <= 0) {
        alert("Gi√° s√°ch kh√¥ng h·ª£p l·ªá!");
        return;
    }
    let quantity = Number(prompt("Nh·∫≠p v√†o s·ªë l∆∞·ª£ng"));

    if (!library[category]) library[category] = [];
    library[category].push({ id, name, price, quantity })
    alert("ƒê√£ th√™m th√†nh c√¥ng s√°ch");
}

function show_all_books() {
    if (Object.keys(library).length == 0) {
        alert("Hi·ªán t·∫°i kh√¥ng c√≥ s√°ch n√†o!!!");
        return;
    }

    let library_text = "======DANH S√ÅCH TH∆Ø VI·ªÜN======\n";
    for (let categr in library) {
        library_text += `\n${categr}\n`;
        library[categr].forEach((element, index) =>
            library_text += `${index + 1}. M√£ s√°ch: ${element.id} - T√™n s√°ch: ${element.name} - Gi√°: ${element.price} - S·ªë l∆∞·ª£ng: ${element.quantity}\n`);
    }

    alert(library_text);
}

function book_search() {
    while (true) {
        let choice_2 = Number(prompt(menu2));
        switch (choice_2) {
            case 1:
                let index_name = prompt("M·ªùi b·∫°n nh·∫≠p v√†o t√™n c·∫ßn t√¨m ki·∫øm").trim();

                let results = [];
                for (let categr in library) {
                    library[categr].forEach((element) => {
                        if (element.name.toLowerCase().includes(index_name.toLowerCase())) {
                            results.push(`${categr}\nM√£ s√°ch: ${element.id} - T√™n s√°ch: ${element.name} - Gi√°: ${element.price} - S·ªë l∆∞·ª£ng: ${element.quantity}\n`)
                        }
                    });
                }
                alert(results.length > 0 ? results.join('\n\n') : `‚ùå Kh√¥ng t√¨m th·∫•y s√°ch c√≥ t√™n: "${index_name}"`);
                break;
            case 2:
                let index_id = Number(prompt("M·ªùi b·∫°n nh·∫≠p v√†o id c·∫ßn t√¨m ki·∫øm"));

                let results_text = "";
                for (let categr in library) {
                    library[categr].forEach((element) => {
                        if (element.id === index_id) {
                            results_text += `Th·ªÉ lo·∫°i: ${categr}\nM√£ s√°ch: ${element.id} - T√™n s√°ch: ${element.name} - Gi√°: ${element.price} - S·ªë l∆∞·ª£ng: ${element.quantity}\n\n`;
                        }
                    });
                }
                alert(results_text ? results_text : `‚ùå Kh√¥ng t√¨m th·∫•y s√°ch v·ªõi ID: ${index_id}`);

                break;
            case 3:
                alert("Tho√°t t√¨m ki·∫øm!");
                break;
        }
        if (choice_2 == 3) break;
    }
}

function buy_book() {
    let index_id = Number(prompt("Nh·∫≠p v√°o id s√°ch c·∫ßn mua."));

    let found_book = null;
    for (let category in library) {
        let book = library[category].find(element => element.id == index_id);
        if (book) {
            found_book = book;
            found_category = category;
            break;
        }
    }

    if (!found_book) {
        alert(`Kh√¥ng t√¨m th·∫•y id ${index_id}`);
        return;
    }

    let quantity = Number(prompt(`Nh·∫≠p s·ªë l∆∞·ª£ng mu·ªën mua: (h√†ng t·ªìn kho: ${found_book.quantity})`));

    if (isNaN(quantity) || quantity <= 0) {
        alert("D·ªØ li·ªáu nh·∫≠p v√†o kh√¥ng h·ª£p l·ªá");
        return;
    }

    if (quantity > found_book.quantity) {
        alert("S·ªë l∆∞·ª£ng s·∫£n ph·∫©m kh√¥ng ƒë·ªß!");
        return;
    }

    found_book.quantity -= quantity;
    let cart_item = cart.find(element => element.id == found_book.id);
    if (cart_item) {
        cart_item.quantity += quantity;
        cart_item.total_price += found_book.price * quantity;
        alert(`üìö ƒê√£ c·∫≠p nh·∫≠t gi·ªè h√†ng:\n- T√™n s√°ch: ${found_book.name}\n- S·ªë l∆∞·ª£ng: ${cart_item.quantity}\n- T·ªïng gi√°: ${cart_item.total_price} VND`);
    } else {
        cart.push({
            id: found_book.id,
            name: found_book.name,
            price: found_book.price,
            total_price: found_book.price * quantity,
            quantity: quantity
        });
        alert(`üìö ƒê√£ th√™m v√†o gi·ªè h√†ng:\n- T√™n s√°ch: ${found_book.name}\n- S·ªë l∆∞·ª£ng: ${quantity}\n- T·ªïng gi√°: ${found_book.price * quantity} VND`);
    }
    
}

function sort_by_price() {
    while (true) {
        let choice_3 = Number(prompt(menu3));
        switch (choice_3) {
            case 1:
                for (let category in library) {
                    library[category].sort((a, b) => a.price - b.price);
                }
                alert("üìö S·∫Øp x·∫øp tƒÉng d·∫ßn th√†nh c√¥ng.");
                break;
            case 2:
                for (let category in library) {
                    library[category].sort((a, b) => b.price - a.price);
                }
                alert("S·∫Øp x·∫øp gi·∫£m d·∫ßn th√†nh c√¥ng.");
                break;
            case 3:
                alert("Tho√°t t√¨m ki·∫øm!");
                break;
        }
        if (choice_3 == 3) break;
    }
}

function calculate_cart_total() {
    if (cart.length === 0) {
        alert("üõí Gi·ªè h√†ng tr·ªëng!");
        return;
    }

    let cart_details = "=======üõí Gi·ªè h√†ng c·ªßa b·∫°n=======\n";

    let total_quantity = 0;
    let total_price = 0;

    cart.forEach(element => {
        total_price += element.total_price;
        total_quantity += element.quantity;

        cart_details += `üìö T√™n s√°ch: ${element.name}\n`;
        cart_details += `   - S·ªë l∆∞·ª£ng: ${element.quantity}\n`;
        cart_details += `   - T·ªïng gi√°: ${element.total_price} VND\n\n`;
    });

    cart_details += `===========================\n`;
    cart_details += `üì¶ T·ªïng s·ªë l∆∞·ª£ng s√°ch: ${total_quantity}\n`;
    cart_details += `üí∞ T·ªïng ti·ªÅn c·∫ßn thanh to√°n: ${total_price} VND\n`;

    alert(cart_details);
}


function show_total_books() {
    if (Object.keys(library).length === 0) {
        alert("üìö Hi·ªán t·∫°i kho s√°ch tr·ªëng!");
        return;
    }

    let totalBooks = 0;
    let stockDetails = "üì¶ T·ªïng s·ªë l∆∞·ª£ng s√°ch trong kho:\n\n";

    for (let category in library) {
        let categoryTotal = library[category].reduce((sum, book) => sum + book.quantity, 0);
        totalBooks += categoryTotal;
        stockDetails += `üìñ ${category}: ${categoryTotal} cu·ªën\n`;
    }

    stockDetails += `\n========================\n`;
    stockDetails += `üìä T·ªïng t·∫•t c·∫£ c√°c s√°ch: ${totalBooks} cu·ªën\n`;

    alert(stockDetails);
}
